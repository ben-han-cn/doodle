(Int, Int) ---> int * int
[Bool]     ---> bool list
module
1 structure(put type and function together)
  module IntSet = struct
    type t = int
    type set = t list
    let empty = []
    let member l s = List.exists(fun x -> x = l) s
  end //if IntSet is not provided, the name will be 
      //transformed from file name

  //nested structures
  module IntSet = struct 
    module Compare = struct
      type t = int
      let eq x y = x = y
    end
  end

  using structure
  1 open IntSet // put all content of IntSet into current scope
  2 IntSet.Compare.eql 1 1
  3 IntSet.Compare.(eql 1 1)
  4 let module alias = IntSet.Compare in
      alias.eql 1 1

2 signature(define an interface for a structure)
  module type Set = sig
    type 't set
    val empty: 't set
    val member: 't set -> 't -> bool
  end

3 functor(functions from struct to struct)
  module type Ordering = sig
    type t
    val compare: t -> t -> int
  end

  module MakeSet(O : Ordering) = struct
    type t = O.t
    let empty = []
    let rec member s x -
      match s with
        [] -> false
      | hd::tl -> 
        match O.compare x hd with
           0 -> true
        |  1 -> false
        | -1 -> member tl x
  end

  module IntOrdering = struct
    type t = int
    let compare = Int.Compare
  end

  module IntSet = MakeSet(IntOrdering)

  let a = IntSet.(insert 1 empty) //local open

  like go, instance of a signature(interface) is implicit, and
  using it needs functor
  //haskell
  csv :: Show a => [a] -> String

  //ocaml
  module Csv(S:Show) = struct
    let rec to_csv : S.t list -> string =
      ....
  end
  module x = Csv(ShowInt)
  x.to_csv [1;2;3]

  use include to extend module
  module Listy = struct 
    include list
    let intersperse t sep = ...
  end


https://blog.baturin.org/introduction-to-ocaml.html
