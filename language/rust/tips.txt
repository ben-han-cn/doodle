1 default attribute
#[derive(Default)]
struct MyStruct {
    xxx,
    xxx,
}

impl MyStruct {
    pub fn with_name(n: &'a str) -> Self {
        MyStruct {
            xxx: n,
            ..Default::default()
        }
    } 
}

2 argument convension trait
fn short<S: AsRef<str>>(mut self, s: S) -> Self {
    self.s.short = s.as_ref().trim_left_matches(|c| c == '-').chars().nth(0);
    self
}

pub trait AsRef<T: ?Sized> {
    fn as_ref(&self) -> &T;
}
