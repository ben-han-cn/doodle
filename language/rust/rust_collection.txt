let a = [1, 2, 3];          //[1; 10]
let va = vec![1, 2, 3]      //vec![1; 10]

vec:
let mut x = vec!["This", "is", "a", "sentence"];
x.insert(1, "line");
x.insert(2, "contains");
x.remove(3);
x.push("about Rust");
x.pop();
for i in 0..x.len() { print!("{} ", x[i]); }


heterogeneous data structures: tuple, struct, tuple-struct

let data = (10000, 12.3, 'q')
struct Data {
    integer: i32,
    fractional: f32,
    character: char,
}
struct Data(i32, f32, char);


let mut v = Vec::<usize>::new();
let mut v = Vec::<usize>::with_capacity(1000);
v.push(i);
v.pop();
v.remove(0);
v.insert(1, 100);

queue:
let mut q = std::collections::VecDeque::<usize>::new();
q.push_back(19);
q.pop_front();
q.push_front(20);
q.pop_back();


let mut h = std::collections::BinaryHeap::<i32>::new();
h.push(10);
h.push(20);
let end = h.pop().unwrap();

//unordered set
let mut s = std::collections::HashSet::<i32>::new();
//ordered set
let mut s = std::collections::BTreeSet::<i32>::new();
s.insert(10);
s.contains(s);

//unordered map
let mut m = std::collections::HashMap::<_, _>::new();
//ordered map
let mut m = std::collections::BTreeMap::<_, _>::new();
m.insert(key, value);
for (k, v) in m.iter() {
}

s.insert(10);
s.contains(s);



