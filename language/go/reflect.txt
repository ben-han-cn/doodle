interface is a type in golang
acatually there are two kind of interface
1 empty interface (has no method)
2 concrete interface (has a least one method)

but the underlaying sturcture in mem is same

|type and func table|
----------------------
|     data          |

for two kind of interface if it's uninitialized, they
are totally same, has same zero value

var i io.Reader
var e interface{}
i == e 

for empty interface it has no func table, type point to 
the real type of the data it holds

for concrete interface, func table only contain the method
defined in its declare.

var a Typexxx
var i interface{}
i = a
runtime will make a copy of value of a to i's data part

a := 10
v = reflect.ValueOf(a)
i = v // data part is the instance of reflect.Value 
i = v.Interface() //data part is value of a


nil is typed, and is default value for
pointers, slices, maps, channels, functions, interfaces
nil is predefined but not keywords, which means
    var nil = 10 
is valid

nil interface == (nil type, nil value)
var p *Persion
var s fmt.Stringer = p
s == nil // false , s == (*Persion, nil)
don't return concrete error types


const s1 = "string"
s2 := "string" 
s1 is untyped, it could be used to any place where the type could
convert from string, for example 
    type Foo string
but s2 is typed, its type is string
only const could be untyped (maybe because it will disappared at runtime, and will
be converted to other type during compiling)
