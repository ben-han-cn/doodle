APP
OTP
BEAM     erlang vm (bj.. erlang abstract machine)
ERTS     erlang runtime system
OS
HW/VM


erlang parallelism
one scheduler has two queues, ready queue and waiting queue, 
scheduler pick process from ready queue and handle it to BEAM,
the process's time slice is used up, it's pushed into the bottom
of the ready queue,  when process is wait for message, it's pushed
into waiting queue.
Each physical core has one scheduler, this way erlang achieve 
parallelism


Erlang tag scheme
Each data object or pointer to a data objet also has a tag with
information about the data type of the object. Some bits of pointer
are reserved for tag which is used to determine the type of the 
object as well as garbage collector.

Process are just memory
stack
heap
mail box 
PCB(process control block)
PD(process dictionary)


Erlang type system
any
    number
      integer
      float
    atom
    reference
    fun
    port
    pid
    tuple
    map
    list
      nil
      cons
    binary
                  none



GC
a generational copying garbage collection that runs inside each process private heep
independently, and also a reference counting occurs for gloabl shared heep.
There are two strategies: Generational(Minor) and Fullsweep(Major). Generational GC divides
the heap into tw segments: young and old generations. the seperation is based on the fact that
if an object survives a GC cycle the chances of it becoing garbage in short term is low. So the 
young generation is for newly allocated data, and old generation is for the data that have survived
an implementation specific number of GC. this sepration helps the GC to reduce is unnecessary cycles.
The generational GC just collects the young heap, but fullsweep collect both young and old heap.


Scheduling
preemptive vs cooperative. 
whether the scheduler needs task's cooperation for context switching. Preemptive scheduler does 
context switch based on factors like priority, time slice or reductions.

Erlang scheduler is preemptive. The scheduling is based on priority, processes with same priority 
will be scheduled in a round robin fashion. 
collect the young heap, but fullsweep collect both young and old heep.
Reductions is also used to do scheduling. it's counter per process and is normally incremented by one
for each function call. When the count reach the limitation, the process will be preemptived.

+--------------------------------------------------------+
|                                                        |
|  +-----------------+-----------------+                 |
|  |                 |                 |                 |
|  |  Scheduler # 1  |  Run Queue # 1  <--+              |
|  |                 |                 |  |              |
|  +-----------------+-----------------+  |              |
|                                         |              |
|  +-----------------+-----------------+  |              |
|  |                 |                 |  |              |
|  |  Scheduler # 2  |  Run Queue # 2  <----> Migration  |
|  |                 |                 |  |     Logic    |
|  +-----------------+-----------------+  |              |
|                                         |              |
|  +-----------------+-----------------+  |              |
|  |                 |                 |  |              |
|  |  Scheduler # N  |  Run Queue # N  <--+              |
|  |                 |                 |                 |
|  +-----------------+-----------------+                 |
|                                                        |
+--------------------------------------------------------+

migration logic is used to makeing scheduling fair and efficient. It tries to control and balance run queues
based on the statistics that collect from system.
