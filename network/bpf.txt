linux tracing system
    event sources
        kprobes (kernel functions)
        uprobes (userspace c functions)
        kernel trace point
        USDT
    ways to extract data
        perf 
        ftrace 
        system tap
        eBPF
        sysdig
    frontends
        perf
        ftrace
        bcc
        sysdig
        

BPF 
  programming compile to bytecode
  bytecode will be execute on vm in linux kernel

  All interactions with userspace happen through eBPF "maps" which are key-value stores.
  There are no loops, so every eBPF program will finish within some bounded execution time.

cBPF == classic berkeley package filter which is mainly focus on filtering network packets
eBPF == extended BPF 
the difference is the ISA of vm is redesigned, support 64 bit register
these days, BPF == eBPF

eBPF has in-kernel verifier which will verify the user code
which will be executed in kernel mode is safe enough


eBPF is a safe way to load user code into kernel without modify or restart kernel. Kernel provide
a virtual machine which execute its own bytecode. Before run the bytecode asked by user, eBPF will
check the safety to avoid infinite loop, invalid memory acessment, etc. With some llvm backed compiler,
user normally use up level code to program and be translated to the bytecode by the compiler.

BCC == BPF compiler collection which is a BPF frontend library

BPF map
maps is a generic storage of different types for sharing data between kernel and userspace
The maps are accessed from user space via BPF syscall, which has commands:
  create a map with given type and attributes
  map_fd = bpf(BPF_MAP_CREATE, union bpf_attr *attr, u32 size)
  lookup key/value, update, delete, iterate, delete a map
userspace programs use this syscall to create/access maps that BPF programs are concurrently updating 
in runtime, the byte code is simple enough to translate to native code via a JIT embed in kernel.


                                           +-------------------+
                                           |uplevel application|
        +------------+                     +-------------------+
        |instrumented|                         ^              ^
        |application |                 high    |              | low
        +-----+------+                 volume  |              | volume
user space    |                        +-------v---+      +---v----+
--------------|------------------------|Ring buffer|------|eBPF map|---------------
kernel space  |                        +-------^---+      +---^----+
       +------v---------+                      |              |
       |system call path|                      |              |
       | +---------+    |                   +--v--------------v----+
       | |eBPF hook+------------------------|  eBPF       program  |
       | +---------+    |                   +----------------------+
       +----------------+


BPF used in two aspect:
1 kernel trace:
  Kprobes, pref event
  Uprobes, USDT(user-level statically define tracing)
  (Kprobes, Uprobes is dynamic, Tracepoints is static)
    
2 network packet management
  XDP, tc(traffic control)

3 security
  LSM(linux security module) hook

XDP:
Framework for running BPF programs in driverâ€™s RX path
(dpdk related kernel by pass tech to enhance network performance is to move all the network 
pkt processing from kernel to user space, and XDP does in fact the opposite) 

seccomp is based on eBPF


Script syntax
<event source> /<optional filter>/ { <program body> }

kprobe:vfs_read { @start[tid] = nsecs; }
<- 1 -><-- 2 -> <---------- 3 --------->

