build and run application

micro service
application run on the platform not one physical machine

orchestration:
organizational primitives
scheduling
scaling
health checking
upgrades
sevice discovery


kubernetes is the new application server

container ---> pod ----> service ---> endpoints

pod -> pod in same host
pod -> pod in different host

pod:
    one or more container share 
        namespace
        storage
        same network interface
        control group
        scheduler


    relative to vm


k8s philosophy:
1 Declarative over imperative
    tell what to do instead of how
2 No hidden api and event driven
    user ---> create pod request to api server --> update etcd
    scheduler monitor the pod create event ---> select node ---> update the pod object
    kubelet monitor the pod update event ---> run the pod scheduled to it 
    it means all the componenet whether its built-in or third parity use the same mechanism
3 meet the user where they are
    don't ask user to modify their app to use k8s
4 work load protability
    same deployment could be runned into any k8s cluster, no matter it's private or public,
    Any node or hardware binding is very bad pratcice


k8s.io
    api
        contain the schema of the API that are served by the Kubernetes apiserver
    apimachinery
        scheme, typing, encoding, decoding and conversion
    client-go
        Go clients for talking to a kubernetes cluster.
    kubernetes
        core folder to build all the componenets


log file of all containers is normally put into /var/log/containers/xxxxxx.log
log file is generated by docker engine, which redirect stdout/stderr from container to the logdriver.
logdriver support several seralize format, json is the most common format.

the file name format is like kube-flannel-zxf76_kube-system_kube-flannel-176c52c12c03aa61960f5f1d6c7780329418335315fc446d79797765539f7343.log
the format is json, for example:
{"log":"I0925 06:59:27.761600       1 hostgw_network.go:89] Subnet added: 10.42.2.0/24 via 10.0.0.33\n","stream":"stderr","time":"2018-09-2    5T06:59:27.761853012Z"}

fluent-bit (fluentd c version)


k8s' three essential components:
cluster
pipeline
registry



advantage of k8s
1 workload portability, flixibility (run everywhere)
2 convenience of operation and automation
3 independence from vendor lock-in
4 rich ecosystem
5 start-up times, cost savings
6 extensible api
7 existing k8s infrastcuture
