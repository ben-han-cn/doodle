volume binding occurs immediately by pv controller once a PersistentVolumeClaim 
is created, In order for volume binding to take into account all of a pod's other 
scheduling constraints, volume binding must be delayed until a Pod is being scheduled.

type PersistentVolumeSpec struct {
    ...
    NodeAffinity *VolumeNodeAffinity
}

type VolumeNodeAffinity struct {
    // these required constraints
    Required *NodeSelector
}

type NodeSelector struct {
    //The terms are ORed.
    NodeSelectorTerms []NodeSelectorTerm 
}

type NodeSelectorTerm struct {
    MatchExpressions []NodeSelectorRequirement
    MatchFields []NodeSelectorRequirement 
}


bound pvc enforcement
pvc already bind to a pv
1 scheduler predicate: pod refer to a pvc which is bound to a pv with NodeAffinity
predicate will evaluate the required NodeSelector to filter the nodes the pod can be
scheduled to.
2 kubelet will verify pv NodeAffinity against the Node when mounting the pvs.


unbound pvc binding: Delayed Volume Binding
type StorageClass struct {
    BindingMode *BindingMode
}

type BindingMode string
const (
    BindingImmediate BindingMode = "Immediate"
    BindingWaitForFirstConsumer BindingMode = "WaitForFirstConsumer"
)


work flow:
1 Admin pre-provisions PVs and/or StorageClasses.
2 User creates unbound PVC and there are no prebound PVs for it.
3 NEW: PVC binding and provisioning is delayed until a pod is created that references it.
4 User creates a pod that uses the PVC.
5 Pod starts to get processed by the scheduler.
6 Scheduler processes predicates.
7 NEW: A new predicate function, called CheckVolumeBinding, will process both bound and 
unbound PVCs of the Pod. It will validate the VolumeNodeAffinity for bound PVCs. For unbound 
PVCs, it will try to find matching PVs for that node based on the PV NodeAffinity. If there 
are no matching PVs, then it checks if dynamic provisioning is possible for that node based 
on StorageClass AllowedTopologies.
8 The scheduler continues to evaluate priority functions
9 NEW: A new priority function, called PrioritizeVolumes, will get the PV matches per PVC per 
node, and compute a priority score based on various factors.
10 After evaluating all the predicates and priorities, the scheduler will pick a node.
11 NEW: A new assume function, AssumePodVolumes, is called by the scheduler. The assume function 
will check if any binding or provisioning operations need to be done. If so, it will update the 
PV cache to mark the PVs with the chosen PVCs and queue the Pod for volume binding.
12 AssumePod is done by the scheduler.
13 NEW: If PVC binding or provisioning is required, a new bind function, BindPodVolumes, will be 
called asynchronously, passing in the selected node. The bind function will prebind the PV to the 
PVC, or trigger dynamic provisioning. Then, it waits for the binding or provisioning operation to 
complete.
14 In the same async thread, scheduler binds the Pod to a Node.
15 Kubelet starts the Pod.


PV Controller Changes
When the feature gate is enabled, the PV controller needs to skip binding unbound PVCs with 
VolumBindingWaitForFirstConsumer and no prebound PVs to let it come through the scheduler path.

Dynamic provisioning will also be skipped if VolumBindingWaitForFirstConsumer is set. The scheduler 
will signal to the PV controller to start dynamic provisioning by setting the "annSelectedNode" annotation 
in the PVC. If provisioning fails, the PV controller can signal back to the scheduler to retry 
dynamic provisioning by removing the annSelectedNode annotation. For external provisioners, the 
external provisioner needs to remove the annotation.

No other state machine changes are required. The PV controller continues to handle the remaining 
scenarios without any change.

The methods to find matching PVs for a claim and prebind PVs need to be refactored for use by the 
new scheduler functions.

Dynamic Provisioning interface changes
The dynamic provisioning interfaces will be updated to pass in:

selectedNode, when late binding is enabled on the StorageClass
allowedTopologies, when it is set in the StorageClass
If selectedNode is set, the provisioner should get its appropriate topology labels from the Node 
object, and provision a volume based on those topology values. In the common use case for a volume 
supporting a single topology domain, if nodeName is set, then allowedTopologies can be ignored by 
the provisioner. However, multi-domain volume provisioners may still need to look at allowedTopologies 
to restrict the remaining domains.

In-tree provisioners:
Provision(selectedNode *v1.Node, allowedTopologies *storagev1.VolumeProvisioningTopology) (*v1.PersistentVolume, error)

External provisioners:
+ selectedNode will be represented by the PVC annotation "volume.alpha.kubernetes.io/selectedNode". 
Value is the name of the node.
+ allowedTopologies must be obtained by looking at the StorageClass for the PVC.

New Permissions
Provisioners will need to be able to get Node and StorageClass objects.

Scheduler Changes
Predicate
A new predicate function checks all of a Pod's unbound PVCs can be satisfied by existing PVs or dynamically 
provisioned PVs that are topologically-constrained to the Node.

CheckVolumeBinding(pod *v1.Pod, node *v1.Node) (canBeBound bool, err error)
If all the Pod’s PVCs are bound, return true.
Otherwise try to find matching PVs for all of the unbound PVCs in order of decreasing requested capacity.
Walk through all the PVs.
Find best matching PV for the PVC where PV topology is satisfied by the Node.
Temporarily cache this PV choice for the PVC per Node, for fast processing later in the priority and bind functions.
Return true if all PVCs are matched.
If there are still unmatched PVCs, check if dynamic provisioning is possible, by evaluating StorageClass.
AllowedTopologies. If so, temporarily cache this decision in the PVC per Node.
Otherwise return false.
Note that we should consider all the cases which may affect predicate cached results of CheckVolumeBinding and 
other scheduler predicates, this will be explained later.

Priority
After all the predicates run, there is a reduced set of Nodes that can fit a Pod. A new priority function 
will rank the remaining nodes based on the unbound PVCs and their matching PVs.

PrioritizeVolumes(pod *v1.Pod, filteredNodes HostPriorityList) (rankedNodes HostPriorityList, err error)
1 For each Node, get the cached PV matches for the Pod’s PVCs.
2 Compute a priority score for the Node using the following factors:
2.1 How close the PVC’s requested capacity and PV’s capacity are.
2.2 Matching pre-provisioned PVs is preferred over dynamic provisioning because we assume that the administrator 
has specifically created these PVs for the Pod.
TODO (beta): figure out weights and exact calculation

Assume
Once all the predicates and priorities have run, then the scheduler picks a Node. Then we can bind or provision 
PVCs for that Node. For better scheduler performance, we’ll assume that the binding will likely succeed, and 
update the PV and PVC caches first. Then the actual binding API update will be made asynchronously, and the 
scheduler can continue processing other Pods.

For the alpha phase, the AssumePodVolumes function will be directly called by the scheduler. We’ll consider 
creating a generic scheduler interface in a subsequent phase.

AssumePodVolumes(pod *v1.pod, node *v1.node) (pvcbindingrequired bool, err error)
1 If all the Pod’s PVCs are bound, return false.
2 For pre-provisioned PV binding:
2.1 Get the cached matching PVs for the PVCs on that Node.
2.2 Validate the actual PV state.
2.3 Mark PV.ClaimRef in the PV cache.
2.4 Cache the PVs that need binding in the Pod object.
3 For in-tree and external dynamic provisioning:
3.1 Mark the PVC annSelectedNode in the PVC cache.
3.2 Cache the PVCs that need provisioning in the Pod object.
4 Return true

Bind
A separate go routine performs the binding operation for the Pod.

If AssumePodVolumes returns pvcBindingRequired, then BindPodVolumes is called first in this go routine. It will handle binding and provisioning of PVCs that were assumed, and wait for the operations to complete.

Once complete, or if no volumes need to be bound, then the scheduler continues binding the Pod to the Node.

For the alpha phase, the BindPodVolumes function will be directly called by the scheduler. We’ll consider creating a generic scheduler interface in a subsequent phase.

BindPodVolumes(pod *v1.Pod, node *v1.Node) (err error)
1 For pre-provisioned PV binding:
1.1 Prebind the PV by updating the PersistentVolume.ClaimRef field.
1.2 If the prebind fails, revert the cache updates.
2 For in-tree and external dynamic provisioning:
2.1 Set annSelectedNode on the PVC.
3 Wait for binding and provisioning to complete.
3.1 In the case of failure, error is returned and the Pod will retry scheduling. Failure scenarios include:
    PV or PVC got deleted
    PV.ClaimRef got cleared
    PVC selectedNode annotation got cleared or is set to the wrong node
TODO: pv controller has a high resync frequency, do we need something similar for the scheduler too


Access Control
Scheduler will need PV update permissions for prebinding pre-provisioned PVs, and PVC update permissions for triggering dynamic provisioning.

Caching
There are two new caches needed in the scheduler.

The first cache is for handling the PV/PVC API binding updates occurring asynchronously with the main scheduler 
loop. AssumePodVolumes needs to store the updated API objects before BindPodVolumes makes the API update, so that 
future binding decisions will not choose any assumed PVs. In addition, if the API update fails, the cached updates 
need to be reverted and restored with the actual API object. The cache will return either the cached-only object, 
or the informer object, whichever one is latest. Informer updates will always override the cached-only object. 
The new predicate and priority functions must get the objects from this cache instead of from the informer cache. 
This cache only stores pointers to objects and most of the time will only point to the informer object, so the 
memory footprint per object is small.

The second cache is for storing temporary state as the Pod goes from predicates to priorities and then assume. 
This all happens serially, so the cache can be cleared at the beginning of each pod scheduling loop. This cache is 
used for:
+ Indicating if all the PVCs are already bound at the beginning of the pod scheduling loop. This is to handle 
situations where volumes may have become bound in the middle of processing the predicates. We need to ensure that 
all the volume predicates are fully run once all PVCs are bound.
+ Caching PV matches per node decisions that the predicate had made. This is an optimization to avoid walking 
through all the PVs again in priority and assume functions.
+ Caching PVC dynamic provisioning decisions per node that the predicate had made.

Event handling
Move pods into active queue
When a pod is tried and determined to be unschedulable, it will be placed in the unschedulable queue by scheduler. It will not be scheduled until being moved to active queue. For volume topology scheduling, we need to move pods to active queue in following scenarios:

+ on PVC add

Pod which references nonexistent PVCs is unschedulable for now, we need to move pods to active queue when a PVC is added.

+ on PVC update

The proposed design has the scheduler initiating the binding transaction by prebinding the PV and waiting for PV controller to finish binding and put it back in the schedule queue. To achieve this, we need to move pods to active queue on PVC update.

+ on PV add

Pods created when there are no PVs available will be stuck in unschedulable queue. But unbound PVs created for static provisioning and delay binding storage class are skipped in PV controller dynamic provisioning and binding process, will not trigger events to schedule pod again. So we need to move pods to active queue on PV add for this scenario.

+ on PV update

In scheduler assume process, if volume binding is required, scheduler will put pod to unschedulable queue and wait for asynchronous volume binding updates are made. But binding volumes worker may fail to update assumed pod volume bindings due to conflicts if PVs are updated by PV controller or other entities. So we need to move pods to active queue on PV update for this scenario.

+ on Storage Class add

CheckVolumeBindingPred will fail if pod has unbound immediate PVCs. If these PVCs have specified StorageClass name, creating StorageClass objects with late binding for these PVCs will cause predicates to pass, so we need to move pods to active queue when a StorageClass with WaitForFirstConsumer is added.

Invalidate predicate equivalence cache
Scheduler now have an optional equivalence cache to improve scheduler's scalability. We need to invalidate CheckVolumeBinding/NoVolumeZoneConflict predicate cached results in following scenarios to keep equivalence class cache up to date:

+ on PVC add/delete

When PVCs are created or deleted, available PVs to choose from for volume scheduling may change, we need to invalidate CheckVolumeBinding predicate.

+ on PVC update

PVC volume binding may change on PVC update, we need to invalidate CheckVolumeBinding predicate.

+ on PV add/delete

When PVs are created or deleted, available PVs to choose from for volume scheduling will change, we need to invalidate CheckVolumeBinding predicate.

+ on PV update

CheckVolumeBinding predicate may cache PVs in pod binding cache. When PV got updated, we should invalidate cache, otherwise assume process will fail with out of sync error.

+ on StorageClass delete

When a StorageClass with WaitForFirstConsumer is deleted, PVCs which references this storage class will be in immediate binding mode. We need to invalidate CheckVolumeBinding and NoVolumeZoneConflict.
