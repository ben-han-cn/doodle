alias k=kubectl
k run ghost --image=ghost:0.9 --replicas=2
k expose deployments ghost --port=2368 --type=NodePort


k get pods,rs,deployments
k get pods --output=wide
k get pods -l app=flask
k get pods -L app,pod-template-hash //also display label value of specified key
k label node <nodename> <labename>=xxxx //add label
k label node <nodename> <labename>- //delete label

k logs redis-xxxxxxx

k cluster-info

k get all

k delete svc,deploy -l app=niceone // -l == select label with
k delete pods --all --namespace test
k delete -f xxx.yml

k get --raw /api/v1/namespaces/kube-system //direct access rest api
k get pods --watch //k get pods -w
k get pods -o json
k get pods -o wide
k get pods -o jsonpath="{.items[*].spec.containers[*].name}"
k exec ghost-6b8f77589d-lfcv8 -c ghost -- cat /etc/resolv.conf
k exec -it ghost-6b8f77589d-lfcv8 /bin/sh

k annotate namespace default daughter=xuru
k apply -f deploy/flask.yml --dry-run --validate

ETCDCTL_API=2 ./etcdctl ls / --recursive

//run etcd
./etcd

//run single api-server, this may needs root
kube-apiserver 
    --secure-port 0 
    --etcd-servers http://127.0.0.1:2379 
    --service-cluster-ip-range 10.0.0.0/16 
    --storage-backend etcd2 
    --storage-media-type application/json

etcdctl --endpoints=https://10.0.0.31:2379 \
    --key=ssl/kube-node-key.pem \
    --cert=ssl/kube-node.pem \
    --cacert=ssl/kube-ca.pem \
    get / --prefix


//install docker
curl https://releases.rancher.com/install-docker/17.03.sh | sh

alias k2="kubectl --kubeconfig /home/vagrant/workspace/test/rke/kube_config_cluster.yml"
k2 logs -f -n kube-system kube-flannel-pfgxt kube-flannel


function clean_iptable {
  sudo iptables -P INPUT ACCEPT
  sudo iptables -P FORWARD ACCEPT
  sudo iptables -P OUTPUT ACCEPT
  sudo iptables -t nat -F
  sudo iptables -t mangle -F
  sudo iptables -F
  sudo iptables -X
}

function clean_route {
  sudo ip route del 10.42.0.0/24
  sudo ip route del 10.42.1.0/24
}

k2 patch service counter-test --patch "$(cat counter_service.yaml)"


modify an existing resource

kubectl edit                   opens the object's manifest in default editor. after make the 
                               changes, the object is updated
                               kubectl edit deployment kubia

kubectl patch                  modify individual properties of an object
                               kubectl patch deployment kubia -p ''

kubectl apply                  modify the object by applying property values from a full yaml/json 
                               file. if the object specified doesn't existyet, it's created.
                               the file needs to contain the full definition of the resource.
                               kubectl apply -f kubia-deployment-v2.ymal

krubectl replace               replace the object with a new one from a yaml/json file, in contrast to apply command, this command requires the object exists, otherwise it returns error
                        
kubectl set image              change the container image defined in a pod. rc template, deployment, domainset, join or replicaset
                               kubectl set image deployment kubia nodejs=luksa/kubia:v2


kubectl create/delete/replace is called Imperative style commands, you tell what should be done to kubenetes
kubectl apply is called declarative style command, you just show all the objects, it's up to kubenetes to decide, which should
    be done, kubenetes may create, delete, replace the old.

execute cmd in a container inside a pod
$ kubectl exec fortune-configmap-volume -c web-server cat /etc/nginx/conf.d/my-nginx-config.conf
$ kubectl exec fortune-configmap-volume -c web-server -- nginx -s reload

configmaps -- cm
daemonsets -- ds
deployments -- deploy
endpoints   -- ep
events      -- ev
igresses    -- ing
namespaces  -- ns
nodes       -- no
persistentvolumes  -- pv
persistentvolumnclaims -- pvc
pods      -- po
replicasets -- rs
replicationcontrollers -- rc
resourcequotas -- quota
services -- svc
serviceaccounts -- sa
statefulset -- sts

local proxy:
k proxy --port=8080
curl http://localhost:8080/api/v1/namespaces/kube-system

port forwarding:
k -n emojivoto port-forward web-848d6c9894-pmgbv 8080:80
emojivoto            --- namespace
web-848d6c9894-pmgbv --- pod name
8080:80              --- <local port>:<pod exposed port>

//set node taint to avoid k8s to schedule other pod into this node
k taint nodes <nodeName> postgres=:NoSchedule
