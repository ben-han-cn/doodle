package controller

//Deploy ---> replicaset ---> pod

type ReplicaSetController struct {
	kubeClient    clientset.Interface
	podController controller.PodControlInterface
	rsLister      appslisters.ReplicaSetLister
	podLister     corelisters.PodLister
	queue         workqueue.RateLimitingInterface
}


Deployment Controller
The DeploymentController will process Deployments and crud ReplicaSets. For each 
creation or update for a Deployment, it will:
1 Find all RSs (ReplicaSets) whose label selector is a superset of DeploymentSpec.Selector.
2 The new RS can have the same selector as the old RS and hence we add a unique 
selector to all these RSs (and the corresponding label to their pods) to ensure that 
they do not select the newly created pods (or old pods get selected by the new RS).
	2.1 The label key will be "pod-template-hash".
	2.2 The label value will be the hash of {podTemplateSpec+collisionCount} where 
    podTemplateSpec is the one that the new RS uses and collisionCount is a counter in 
    the DeploymentStatus that increments every time a hash collision happens (hash collisions 
	should be rare with fnv).
	2.3 If the RSs and pods don't already have this label and selector:
		We will first add this to RS.PodTemplateSpec.Metadata.Labels for all RSs to ensure 
        that all new pods that they create will have this label.
		Then we will add this label to their existing pods
		Eventually we flip the RS selector to use the new label. 
3 Find if there exists an RS for which value of "pod-template-hash" label is same as 
hash of DeploymentSpec.PodTemplateSpec. 
If it exists already, then this is the RS that will be ramped up. If there is no such RS, 
then we create a new one using DeploymentSpec and then add a "pod-template-hash" label to it. 
The size of the new RS depends on the used DeploymentStrategyType Scale up the new RS and 
scale down the olds ones as per the DeploymentStrategy. Raise events appropriately (both in 
case of failure or success).
4 Go back to step 1 unless the new RS has been ramped up to desired replicas and the 
old RSs have been ramped down to 0.
5 Cleanup old RSs as per revisionHistoryLimit. 
DeploymentController is stateless so that it can recover in case it crashes during a deployment
