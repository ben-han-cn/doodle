1 client module
client
functionality:
	CRUD & List resources
	update status of resource

desgin:
	expose runtime.Scheme and meta.RESTMapper which will make client
	to understand not only k8s core type but other custom resources.

typedClient
    implementation of the client interface
    invoke the go-client api with rest client and meta data
    
client_cache
    return the rest client to typedClient for sepcified resource
    cache rest client for known resources

note:
    resource has two kind
        structured:         has related golang struct 
        unstructured:       maps which includes key value
    unstructured resource is handled by k8s.io/client-go/dynamic

    "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
    obj runtime.Object could be checked through 
    u, ok := obj.(*unstructured.Unstructured)


2 cache module
cache interface
    get/list resources
    get informer for specified resource or gvk
    indexing specified field of resource
        index is used when list object use field selector 

informerCache
    implementation of the cache interface
    a wrapper of InformersMap

informersMap
    for each gvk create a SharedIndexInformer
    add client read interface to SharedIndexInformer

SharedIndexInformer:(in client-go)

type SharedInformer interface {
    AddEventHandler(handler ResourceEventHandler)
    AddEventHandlerWithResyncPeriod(handler ResourceEventHandler, resyncPeriod time.Duration)
    GetStore() Store
    GetController() Controller
    Run(stopCh <-chan struct{})
    HasSynced() bool
    LastSyncResourceVersion() string
}

type SharedIndexInformer interface {
    SharedInformer
    AddIndexers(indexers Indexers) error
    GetIndexer() Indexer
}

informer get event from listwatcher, listwatcher do list and watch through restclient
c.Get().
  Namespace(namespace).
  Resource(resource).
  VersionedParams(&options, metav1.ParameterCodec).
  Watch() 

3 publisher module
EventRecorder(/k8s.io/client-go/tools/record/event.go):
create event, and send to broadcaster, four fuction each add more info to the event
type interface {
    Event(object runtime.Object, eventtype, reason, message string)
    Eventf(object runtime.Object, eventtype, reason, messageFmt string, args ...interface{})
    PastEventf(object runtime.Object, timestamp metav1.Time, eventtype, reason, messageFmt string, args ...interface{})
    AnnotatedEventf(object runtime.Object, annotations map[string]string, eventtype, reason, messageFmt string, args ...interface{})
} 

EventBroadcaster(/k8s.io/client-go/tools/record/event.go):
return EventRecorder which connect to current boradcaster, and dispatch the event send from EventRecorder to specified sinker
// EventBroadcaster knows how to receive events and send them to any EventSink, watcher, or log.
type EventBroadcaster interface {
    StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface
    StartRecordingToSink(sink EventSink) watch.Interface
    StartLogging(logf func(format string, args ...interface{})) watch.Interface
    NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder
}

publisher
    a wrapper around a broadcaster
    return recorder for specified component which will be used as event source 

type EventSource struct {
    Component string 
    // Node name on which the event is generated.
    Host string 
}
