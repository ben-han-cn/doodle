use annotation to represent status of resource
to avoid multi component update the same attribute
    atomic attribute should has only one updator
    use resource version to avoid concurrent update composite structure
    use annotation key to notify unique owner
    use more annotation key/status to enforce order
    
Generation ObservedGeneration
when update the spec or delete the resource, its generation will be increased
for resourceVersion, even status change will change the resourceVersion

ObservedGeneration >= Generation, means the controller has done its job on 
its managed resource 


import attributes
    objectMeta.SetGeneration(objectMeta.GetGeneration() + 1)
    objectMeta.SetDeletionTimestamp(&now)
    objectMeta.SetDeletionGracePeriodSeconds(&zero)


ControllerRef

The Controller API field in OwnerReference marks whether a given owner is a managing controller:

type OwnerReference struct {
    â€¦
    // If true, this reference points to the managing controller.
    // +optional
    Controller *bool
}
A ControllerRef is thus defined as an OwnerReference with Controller=true. Each object may have 
at most one ControllerRef in its list of OwnerReferences. The validator for OwnerReferences lists 
will fail any update that would violate this invariant.

The Three Laws of Controllers
All controllers that manage collections of objects should obey the following rules.
1 Take ownership
A controller should claim ownership of any objects it creates by adding a ControllerRef, and may also 
claim ownership of an object it didn't create, as long as the object has no existing ControllerRef 
(i.e. it is an orphan).

2 Don't interfere
A controller should not take any action (e.g. edit/scale/delete) on an object it does not own, except 
to adopt the object if allowed by the First Law.

3 Don't share
A controller should not count an object it does not own toward satisfying its desired state , although 
it may include the object in plans to achieve its desired state (e.g. through adoption) as long as 
such plans do not conflict with the First or Second Laws.


Adoption
If a controller finds an orphaned object (an object with no ControllerRef) that matches its selector, 
it may try to adopt the object by adding a ControllerRef. Note that whether or not the controller should 
try to adopt the object depends on the particular controller and object.
Multiple controllers can race to adopt a given object, but only one can win by being the first to add a 
ControllerRef to the object's OwnerReferences list. The losers will see their adoptions fail due to a 
validation error as explained above.
If a controller has a non-nil DeletionTimestamp, it must not attempt adoption or take any other actions 
except updating its Status. This prevents readoption of objects orphaned by the orphan finalizer during 
deletion of the controller.

Orphaning
When a controller is deleted, the objects it owns will either be orphaned or deleted according to the 
normal Garbage Collection behavior, based on OwnerReferences.

In addition, if a controller finds that it owns an object that no longer matches its selector, it should 
orphan the object by removing itself from the object's OwnerReferences list. Since ControllerRef is just 
a special type of OwnerReference, this also means the ControllerRef is removed.
