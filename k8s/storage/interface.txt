// VolumePlugin is an interface to volume plugins that can be used on a
// kubernetes node (e.g. by kubelet) to instantiate and manage volumes.
type VolumePlugin interface {
    // Init initializes the plugin.  This will be called exactly once
    // before any New* calls are made - implementations of plugins may
    // depend on this.
    Init(host VolumeHost) error

    // Name returns the plugin's name.  Plugins must use namespaced names
    // such as "example.com/volume" and contain exactly one '/' character.
    // The "kubernetes.io" namespace is reserved for plugins which are
    // bundled with kubernetes.
    GetPluginName() string

    // GetVolumeName returns the name/ID to uniquely identifying the actual
    // backing device, directory, path, etc. referenced by the specified volume
    // spec.
    // For Attachable volumes, this value must be able to be passed back to
    // volume Detach methods to identify the device to act on.
    // If the plugin does not support the given spec, this returns an error.
    GetVolumeName(spec *Spec) (string, error)

    // CanSupport tests whether the plugin supports a given volume
    // specification from the API.  The spec pointer should be considered
    // const.
    CanSupport(spec *Spec) bool

    // RequiresRemount returns true if this plugin requires mount calls to be
    // reexecuted. Atomically updating volumes, like Downward API, depend on
    // this to update the contents of the volume.
    RequiresRemount() bool

    // NewMounter creates a new volume.Mounter from an API specification.
    // Ownership of the spec pointer in *not* transferred.
    // - spec: The v1.Volume spec
    // - pod: The enclosing pod
    NewMounter(spec *Spec, podRef *v1.Pod, opts VolumeOptions) (Mounter, error)

    // NewUnmounter creates a new volume.Unmounter from recoverable state.
    // - name: The volume name, as per the v1.Volume spec.
    // - podUID: The UID of the enclosing pod
    NewUnmounter(name string, podUID types.UID) (Unmounter, error)

    // ConstructVolumeSpec constructs a volume spec based on the given volume name
    // and mountPath. The spec may have incomplete information due to limited
    // information from input. This function is used by volume manager to reconstruct
    // volume spec by reading the volume directories from disk
    ConstructVolumeSpec(volumeName, mountPath string) (*Spec, error)

    // SupportsMountOption returns true if volume plugins supports Mount options
    // Specifying mount options in a volume plugin that doesn't support
    // user specified mount options will result in error creating persistent volumes
    SupportsMountOption() bool

    // SupportsBulkVolumeVerification checks if volume plugin type is capable
    // of enabling bulk polling of all nodes. This can speed up verification of
    // attached volumes by quite a bit, but underlying pluging must support it.
    SupportsBulkVolumeVerification() bool
}

// DeviceMountableVolumePlugin is an extended interface of VolumePlugin and is used
// for volumes that requires mount device to a node before binding to volume to pod.
type DeviceMountableVolumePlugin interface {
        VolumePlugin
        NewDeviceMounter() (DeviceMounter, error)
        NewDeviceUmounter() (DeviceUmounter, error)
        GetDeviceMountRefs(deviceMountPath string) ([]string, error)
}


// AttachableVolumePlugin is an extended interface of VolumePlugin and is used for volumes that require attachment
// to a node before mounting.
type AttachableVolumePlugin interface {
        DeviceMountableVolumePlugin 
        NewAttacher() (Attacher, error)
        NewDetacher() (Detacher, error)
}

// Attacher can attach a volume to a node.
type Attacher interface {
        DeviceMounter
        
        // Attaches the volume specified by the given spec to the node with the given Name.
        // On success, returns the device path where the device was attached on the
        // node.
        Attach(spec *Spec, nodeName types.NodeName) (string, error)

        // VolumesAreAttached checks whether the list of volumes still attached to the specified
        // node. It returns a map which maps from the volume spec to the checking result.
        // If an error is occurred during checking, the error will be returned
        VolumesAreAttached(specs []*Spec, nodeName types.NodeName) (map[*Spec]bool, error)

        // WaitForAttach blocks until the device is attached to this
        // node. If it successfully attaches, the path to the device
        // is returned. Otherwise, if the device does not attach after
        // the given timeout period, an error will be returned.
        WaitForAttach(spec *Spec, devicePath string, pod *v1.Pod, timeout time.Duration) (string, error)
}

// DeviceMounter can mount a block volume to a global path.
type DeviceMounter interface {
        // GetDeviceMountPath returns a path where the device should
        // be mounted after it is attached. This is a global mount
        // point which should be bind mounted for individual volumes.
        GetDeviceMountPath(spec *Spec) (string, error)

        // MountDevice mounts the disk to a global path which
        // individual pods can then bind mount
        // Note that devicePath can be empty if the volume plugin does not implement any of Attach and WaitForAttach methods.
        MountDevice(spec *Spec, devicePath string, deviceMountPath string) error
}
