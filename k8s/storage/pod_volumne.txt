makePodDataDirs(pod)
    /var/lib/kubelet/pods/<pod id>/
        containers  
        etc-hosts ---> /etc/hosts content  
        plugins	
        volumes
    os.MkdirAll(kl.getPodDir(uid), 0750);
    os.MkdirAll(kl.getPodVolumesDir(uid), 0750);
    os.MkdirAll(kl.getPodPluginsDir(uid), 0750)

WaitForAttachAndMount(pod)


/kubernetes/pkg/volume
VolumeHost {
     GetMounter(pluginName string) mount.Interface 
}

/kubernetes/pkg/util/mount
type Interface interface {
    Mount(source string, target string, fstype string, options []string) error
    Unmount(target string) error
    ...
}

/kubernetes/pkg/kubelet
func (kvh *kubeletVolumeHost) GetMounter(pluginName string) mount.Interface {
    exec, err := kvh.getMountExec(pluginName)
    if exec == nil {
        //default mounter, which is in kubernetes/pkg/util/mount/mount_linux.go
        return kvh.kubelet.mounter
    }   
    return mount.NewExecMounter(exec, kvh.kubelet.mounter)
}

/kubernetes/pkg/util/mount
type execMounter struct {
    wrappedMounter Interface
    exec           Exec
}
implement Mount/Unmount use exec.Run, for other interface use wrappedMounter

func (m *execMounter) Mount(source string, target string, fstype string, options []string) error {
    bind, bindOpts, bindRemountOpts := isBind(options)
    if bind {
        err := m.doExecMount(source, target, fstype, bindOpts)
        return m.doExecMount(source, target, fstype, bindRemountOpts)
    }   

    return m.doExecMount(source, target, fstype, options)
}

func (m *execMounter) doExecMount(source, target, fstype string, options []string) error {
    mountArgs := makeMountArgs(source, target, fstype, options)
    output, err := m.exec.Run("mount", mountArgs...)
    return err
}


func (kvh *kubeletVolumeHost) getMountExec(pluginName string) (mount.Exec, error) {
    pod, container, err := kvh.mountPodManager.GetMountPod(pluginName)
    return &containerExec{
        pod:           pod,
        containerName: container,
        kl:            kvh.kubelet,
    }, nil 
}

//run the cmd in specified pod for different plugin
func (e *containerExec) Run(cmd string, args ...string) ([]byte, error) {
    cmdline := append([]string{cmd}, args...)
    klog.V(5).Infof("Exec mounter running in pod %s/%s/%s: %v", e.pod.Namespace, e.pod.Name, e.containerName, cmdline)
    return e.kl.RunInContainer(container.GetPodFullName(e.pod), e.pod.UID, e.containerName, cmdline)
}

func (m *basicManager) GetMountPod(pluginName string) (pod *v1.Pod, containerName string, err error) {
    // Read /var/lib/kubelet/plugin-containers/<plugin name>.json
    regPath := m.getVolumePluginRegistrationPath(pluginName)
    regBytes, err := ioutil.ReadFile(regPath)
    var reg volumePluginRegistration
    json.Unmarshal(regBytes, &reg)
    pod, ok := m.podManager.GetPodByName(reg.PodNamespace, reg.PodName)
    for i := range pod.Spec.Containers {
        if pod.Spec.Containers[i].Name == reg.ContainerName {
            return pod, reg.ContainerName, nil
        }
    }
}


plugin:
    NewMounter ---> volume.Mounter ---> SetUp //create needed volume outside of pods/containers

//mount in pod
containerExec {
    pod *v1.Pod
    containerName string
    kl *Kubelet
}

func (e *containerExec) Run(cmd string, args ...string) ([]byte, error) {
    return e.kl.RunInContainer(container.GetPodFullName(e.pod), e.pod.UID, e.containerName, cmdline)
}

func (m *execMounter) doExecMount(source, target, fstype string, options []string) error {
      klog.V(5).Infof("Exec Mounting %s %s %s %v", source, target, fstype, options)
      mountArgs := makeMountArgs(source, target, fstype, options)
      output, err := m.exec.Run("mount", mountArgs...)
}

nfs:
in host, has following mount 
10.0.0.30:/data/k8s/default-www-nfs-web-0-pvc-017f63dd-0b48-11e9-8321-44a84224c9a3 on /var/lib/kubelet/pods/018017f4-0b48-11e9-8321-44a84224c9a3/volumes/kubernetes.io~nfs/pvc-017f63dd-0b48-11e9-8321-44a84224c9a3 type nfs4 (rw,relatime,vers=4.2,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=10.0.0.32,local_lock=none,addr=10.0.0.30)


in container:
HostConfig": {
            "Binds": [
                "/var/lib/kubelet/pods/018017f4-0b48-11e9-8321-44a84224c9a3/volumes/kubernetes.io~nfs/pvc-017f63dd-0b48-11e9-8321-44a84224c9a3:/usr/share/nginx/html",
                "/var/lib/kubelet/pods/018017f4-0b48-11e9-8321-44a84224c9a3/volumes/kubernetes.io~secret/default-token-g8ftm:/var/run/secrets/kubernetes.io/serviceaccount:ro",
                "/var/lib/kubelet/pods/018017f4-0b48-11e9-8321-44a84224c9a3/etc-hosts:/etc/hosts",
                "/var/lib/kubelet/pods/018017f4-0b48-11e9-8321-44a84224c9a3/containers/nginx/4fdc4156:/dev/termination-log"
            ],
            ....
}


for emptydir:
in container
"HostConfig": {
            "Binds": [
                "/var/lib/kubelet/pods/2613f921-fe89-11e8-8321-44a84224c9a3/volumes/kubernetes.io~empty-dir/data:/prometheus",


in host:
    /var/lib/kubelet/pods/2613f921-fe89-11e8-8321-44a84224c9a3/volumes/kubernetes.io~empty-dir/data is a normal dir
