How CNI plugin works:
A CNI binary:
    handles connectivity - configures the network interface of the pod
A daemon:
    handles reachability - manages routings across the cluster


config file folder: /etc/cni/net.d
plugin folder: /opt/cni/bin

each node will check network status, if cni isn't configured, the node status will be NotReady.
so if the previous two folder is empty, no pod will be setup


when kubelet execute CNI binary, it will pass:
1 container info as env 
    command 
    container id 
    network interface
    network namespace
2 cni config to stdin
    

type CNI interface {
    AddNetworkList(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)
    DelNetworkList(net *NetworkConfigList, rt *RuntimeConf) error

    AddNetwork(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)
    DelNetwork(net *NetworkConfig, rt *RuntimeConf) error
}

kubelet dockershim 
    cni plugin
        based on confpath("/etc/cni/net.d"), binpath("/opt/cni/bin") --> cniNetwork
        type cniNetworkPlugin struct {
            defaultNetwork *cniNetwork
        }


        type cniNetwork struct {
            name          string
            NetworkConfig *libcni.NetworkConfigList
            CNIConfig     libcni.CNI
        }

        rt, err := plugin.buildCNIRuntimeConf(podName, podNamespace, podSandboxID, podNetnsPath)
        CNIConfig.AddNetworkList(NetworkConfig, rt)


buildCNIRuntimeConf(podName, podNamespace, podSandboxID, podNetnsPath)
    rt := &libcni.RuntimeConf{
        ContainerID: podSandboxID.ID,
        NetNS:       podNetnsPath,
        IfName:      network.DefaultInterfaceName,
        Args: [][2]string{
            {"IgnoreUnknown", "1"},
            {"K8S_POD_NAMESPACE", podNs},
            {"K8S_POD_NAME", podName},
            {"K8S_POD_INFRA_CONTAINER_ID", podSandboxID.ID},
        },  
    }
    rt.CapabilityArgs = map[string]interface{}{
        "portMappings": portMappingsParam,
    }



//github.com/containernetworking/cni/libcni
CNIConfig.AddNetworkList: iterator all the plugins in config file, revoke ADD
    for _, net := range list.Plugins {
        pluginPath, err := invoke.FindInPath(net.Network.Type, c.Path)
        if err != nil {
            return nil, err
        }

        newConf, err := buildOneConfig(list, net, prevResult, rt)
        if err != nil {
            return nil, err
        }

        prevResult, err = invoke.ExecPluginWithResult(pluginPath, newConf.Bytes, c.args("ADD", rt))
        if err != nil {
            return nil, err
        }
    }

    return prevResult, nil



CNI project (github.com/containernetwork):
1 cni specification documents
    libcni, a CNI runtime implementation
    skel, a reference plugin implementation
2 a set of "base" plugin
    interface plugin: ptp, bridge, ipvlan, macvlan
    ipam: host-local, DHCP, static
    meta: bandwidth, flannel, portmap, tunning

specification:
    configuration (fed to plugin on stdin for each operation)
        json:
        must have: 
            "name": ""
            "type": "bridge",
            "ipam": {
                "type": "host-local",   
                "subnet": "10.10.0.0/16",
            }
                
    runtime interface
        basic commands: add, del, version
        plugins are executables
        spawned by runtime when network operations are desribed
        fed plugin json configuration via stdin
        also fed container-specific data via stdin, (name, namespace, port mapping etc)
        get strucutred result via stdout (plugin created ip, interface, dns and routing info, etc)
