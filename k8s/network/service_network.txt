service: 
    specify the cluster ip ---> name
    select which pods will be redirect traffic to
    which port will the traffic will be sent

endpoint:   
    same name with the service it belongs
    ready pod for the service
    notready pod (not finish start, failed a readiness check or a liveness check)


conf/apiserver
KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range=10.254.0.0/16"
[Service]
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/apiserver
ExecStart=/usr/bin/kube-apiserver \
        $KUBE_LOGTOSTDERR \
        $KUBE_LOG_LEVEL \
        $KUBE_ETCD_SERVERS \
        $KUBE_API_ADDRESS \
        $KUBE_API_PORT \
        $KUBELET_PORT \
        $KUBE_ALLOW_PRIV \
        $KUBE_SERVICE_ADDRESSES \
        $KUBE_ADMISSION_CONTROL \
        $KUBE_API_ARGS
cmd/kube-apiserver/app/options/options.go:181:	
    fs.IPNetVar(&s.ServiceClusterIPRange, "service-cluster-ip-range", s.ServiceClusterIPRange, ""+


conf/controller-manager
KUBE_CONTROLLER_MANAGER_ARGS="--service-cluster-ip-range=10.254.0.0/16"
[Service]
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/controller-manager
ExecStart=/usr/bin/kube-controller-manager \
        $KUBE_LOGTOSTDERR \
        $KUBE_LOG_LEVEL \
        $KUBE_MASTER \
        $KUBE_CONTROLLER_MANAGER_ARGS
Restart=on-failure
LimitNOFILE=65536

cmd/controller-manager/app/options/nodeipamcontroller.go:36:	
    fs.StringVar(&o.ServiceCIDR, "service-cluster-ip-range", o.ServiceCIDR, "CIDR Range for Services in cluster. Requires --allocate-node-cidrs to be true")



apiVersion: v1
kind: Service
metadata:
  name: linkerd-web
  namespace: linkerd
  resourceVersion: "11263548"
spec:
  clusterIP: 10.43.90.121
  ports:
  - name: http
    port: 8084
    protocol: TCP
    targetPort: 8084
  - name: admin-http
    port: 9994
    protocol: TCP
    targetPort: 9994
  selector:
    linkerd.io/control-plane-component: web
  type: ClusterIP


endpoint
- apiVersion: v1
  kind: Endpoints
  metadata:
    name: linkerd-web
    namespace: linkerd
    resourceVersion: "11263718"
  subsets:
  - addresses:
    - ip: 10.42.1.22
      nodeName: slave1
      targetRef:
        kind: Pod
        name: linkerd-web-67fc55446-8j8hc
        namespace: linkerd
        resourceVersion: "11263717"
    ports:
    - name: http
      port: 8084
      protocol: TCP
    - name: admin-http
      port: 9994
      protocol: TCP


- apiVersion: v1
  kind: Service
  metadata:
    name: elasticsearch-logging
    namespace: logging
    resourceVersion: "11445389"
  spec:
    clusterIP: 10.43.186.123
    ports:
    - port: 9200
      protocol: TCP
      targetPort: db //port defined in container spec
    selector:
      k8s-app: elasticsearch-logging
    sessionAffinity: None
    type: ClusterIP

//the service refer to two pods created by statefulset
//pod created by statefulset will has hostname(elasticsearch-logging-0)
//and the host name could be queried
apiVersion: v1
  kind: Endpoints
  metadata:
    name: elasticsearch-logging
    namespace: logging
  subsets:
  - addresses:
    - hostname: elasticsearch-logging-0
      ip: 10.42.0.42
      nodeName: slave2
      targetRef:
        kind: Pod
        name: elasticsearch-logging-0
        namespace: logging
        resourceVersion: "11445423"
    - hostname: elasticsearch-logging-1
      ip: 10.42.1.33
      nodeName: slave1
      targetRef:
        kind: Pod
        name: elasticsearch-logging-1
        namespace: logging
        resourceVersion: "11445475"
    ports:
    - port: 9200
      protocol: TCP
